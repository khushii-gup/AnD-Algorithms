package ShortestPaths;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class BFSshortestPath {

	public static void main(String[] args) {
		List<List<Integer>> graph = new ArrayList<List<Integer>>();
		for (int i = 0; i < 4; i++) {
			graph.add(new ArrayList<Integer>());
		}
		graph.get(0).add(1);
		// graph.get(0).add(3);
		graph.get(1).add(0);
		graph.get(1).add(2);
		graph.get(2).add(3);
		graph.get(2).add(1);
		graph.get(3).add(0);
		graph.get(3).add(2);

		int[] res = bfs(graph, 0);
		for (int i = 0; i < res.length; i++) {
			System.out.print(res[i] + " ");
		}

	}

	// returns shortest path from vertex s to all other vertices in the graph
	// all edges have no weight or equal weight
	public static int[] bfs(List<List<Integer>> graph, int s) {
		int[] dist = new int[graph.size()];
		LinkedList<Integer> queue = new LinkedList<Integer>();
		boolean[] vis = new boolean[graph.size()];
		queue.add(s);
		vis[s] = true;
		dist[s] = 0;

		while (queue.size() != 0) {

			int currVertex = queue.poll();

			for (int child : graph.get(currVertex)) {
				if (!vis[child]) {
					queue.add(child);
					vis[child] = true;
					dist[child] = dist[currVertex] + 1;

				} else if (dist[child] > dist[currVertex] + 1) {
					dist[child] = dist[currVertex] + 1;
				}
			}
		}

		return dist;
	}

}
