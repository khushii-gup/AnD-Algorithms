public class LongestCommonSubsequence {
	
	public static void main(String[] args) {
		String[] A = {"A", "B", "C", "B", "D" , "A", "B"};
		String[] B = {"B", "D", "C", "A", "B"};
		System.out.println(LCS(A,B));
	
		
	}
	
	public static int LCS(String[] A, String[] B) { //A vertical and B horizontal
		int n = A.length;
		int m = B.length;
		int[][] dp = new int[n+1][m+1];
		
		for(int i = 0; i<=n; i++) {
			dp[i][0] = 0;
		}
		
		for(int  j =0; j<=m; j++) {
			dp[0][j] = 0;
		}
		
		
		for(int i = 1; i<=n; i++) {
			for(int j = 1; j<= m; j++) {
				if(A[i-1].equals(B[j-1])) {
					dp[i][j] = Math.max(dp[i-1][j], Math.max(dp[i][j-1],( dp[i-1][j-1]+1)));
				} else {
					dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
				}
			}
		}
		
		for(int i = 0; i<=n;i++) {
			for(int j = 0; j<=m; j++) {
				System.out.print(dp[i][j] + " ");
			}
			System.out.println();
		}
		
		
		System.out.println(backTracking(dp,A,B));
		
		return dp[n][m];
	}
	
	private static String backTracking(int[][] dp, String[] A, String[] B) {
		int n = A.length;
		int m = B.length;
		int i = n;
		int j = m;
		String res = "";
		
		
		while(i > 0 && j > 0) {
			if(!A[i-1].equals(B[j-1])) {
				if(dp[i][j-1] > dp[i-1][j]) {
					j--;
				} else {
					i--;
				}
			} else {
				res = A[i-1] + res;
				i--;
				j--;
			}
		}
		
		
		return res;
	}
