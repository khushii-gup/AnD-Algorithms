package DynamicProgramming;

public class LongestAscendingSubsequence {
	
	public static void main(String[] args) {
		int[] A = {3,7,8,4,5};
		System.out.println(lAS(A));
	}
	
	public static int lAS(int[] A) {
		int n = A.length;
		int[][] dp = new int[n][n];
		
		
		
		
		
		for(int i = 0; i<n; i++) {
			for(int j = 0; j<n; j++) {
				
				if(i==0 && j==0){
					dp[i][j] = A[0];
				} else if(i==0) {
					dp[i][j] = Integer.MAX_VALUE;
				}else if(j!=0 && dp[i-1][j-1] < A[i] && A[i] < dp[i-1][j]) {
					dp[i][j] = A[i];
				} else if(j==0 && dp[i-1][j] > A[i]){
					dp[i][j] = A[i];
				} else {
					dp[i][j] = dp[i-1][j];
				}
				
			}
		}
		
		
		
		int res = -1;
		for(int j = n-1; j>=0; j--) {
			for(int i = 0; i<n; i++) {
				if(dp[i][j] != Integer.MAX_VALUE) {
					res = j;
					break;
				}
			}
			if(res!=-1) {
				break;
			}
		}
		
		return res+1;
	}

public static int betterLAS(int[] A) {
		int n = A.length;
		int[] dp = new int[n];
		int[] prev = new int[n];
		Arrays.fill(prev , -1);
		dp[0] = A[0];
		
		int length = 1;
		for(int i = 1; i<n; i++) {
			if(A[i] > dp[length-1]) {
				dp[length] = A[i];
				prev[i] = dp[length-1];
				length++;
			}
			if(A[i] < dp[0]) {
				dp[0] = A[i];
			}
			int left = 0;
			int right = length;
			
			//binary search
			while(left < right) {
				int mid = (left+right)/2;
				if(dp[mid] < A[i]) {
					left = mid + 1;
				} else {
					right = mid;
				}
			}
			dp[left] = A[i];
			if(left > 0) {
			prev[i] = dp[left-1];
			} 
		}
		
		
		return length;
	}

}
