class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if(n==1){
            return s;
        }
        int[][] dp = new int[n][n];
        for(int i = 0; i<n; i++){
            dp[i][i] = 1;
            if(i<n-1 && s.charAt(i) == s.charAt(i+1)){
                dp[i][i+1] = 2;
            } else if(i<n-1) dp[i][i+1] = 1;
        }

        for(int gap = 2; gap<n; gap++){
            for(int i = n-1-gap; i>=0; i--){
                int j = gap+i;
                if(s.charAt(i) == s.charAt(j) && ((i+1 == j-1)|| (j-i+1 == dp[i+1][j-1]+2))){
                    dp[i][j] = Math.max(dp[i+1][j-1]+2, Math.max(dp[i+1][j], dp[i][j-1]));
                } else {
                    dp[i][j] = Math.max(dp[i+1][j-1], Math.max(dp[i+1][j], dp[i][j-1]));
                }
            }
        }

        int i = 0;
        int j = n-1;
        String res = "";
        while(j>=i){
            if(i< n-1 && dp[i+1][j] == dp[i][j]){
                i++;
            } else if(j> 0 && dp[i][j-1] == dp[i][j]){
                j--;
            } else if(i<0 && j> 0 && dp[i+1][j-1]+2 == dp[i][j]){
                res = s.substring(i,j+1);
                return res;
            } else {
                res = s.substring(i,j+1);
                return res;
            }
        }
        return res;
    }
}
