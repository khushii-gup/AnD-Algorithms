package DynamicProgramming;

public class MatrixChainMultiplication {
    
    // Function to find the minimum number of scalar multiplications
    // needed to multiply the matrices Ai * Ai+1 * ... * An
    public static int matrixChainOrder(int[] p) {
        int n = p.length - 1; // Number of matrices
        int[][] dp = new int[n + 1][n + 1];

        // Initialize the diagonal elements to 0 (base case)
        for (int i = 1; i <= n; i++) {
            dp[i][i] = 0;
        }

        // Fill in the table using the recurrence relation
        for (int l = 2; l <= n; l++) {
            for (int i = 1; i <= n - l + 1; i++) {
                int j = i + l - 1;
                dp[i][j] = Integer.MAX_VALUE;
                for (int k = i; k < j; k++) {
                	// we access i-1  in p as our indexing of dp table is 1 forward
                    int q = dp[i][k] + dp[k + 1][j] + p[i - 1] * p[k] * p[j];
                    if (q < dp[i][j]) {
                        dp[i][j] = q;
                    }
                }
            }
        }
        for(int i = 0; i<=n; i++) {
        	for(int j = 0; j<=n; j++) {
        		System.out.print(dp[i][j] + " ");
        	}
        	System.out.println();
        }

        // Minimum number of scalar multiplications is stored in dp[1][n]
        return dp[1][n];
    }

    public static void main(String[] args) {
        // Example: dimensions of matrices A1, A2, A3, A4
        int[] dimensions = {10, 30, 5, 60};

        // Output the minimum number of scalar multiplications
        int minMultiplications = matrixChainOrder(dimensions);
        System.out.println("Minimum number of scalar multiplications: " + minMultiplications);
    }
}
