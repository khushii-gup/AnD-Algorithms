public class KnapSack {

	public static void main(String[] args) {
		int[] weights = { 2, 1, 3, 2 };
		int[] values = { 3, 2, 4, 2 };
		int bagWeight = 1;
		System.out.println(recursion(weights, values, bagWeight, weights[0], 0));
		System.out.println(bottomUp(weights,values, bagWeight));

	}

	public static int recursion(int[] weights, int[] values, int maxWeight, int currWeight, int index) {

		
		return -1;
	}

	public static int topDown(int[] weights, int[] values, int maxWeight, int index, int[][] dp) {
		
		
		
		return -1;
	}
	
	
	public static int bottomUp(int[] weights, int[] values, int maxWeight) {
		
		int n = weights.length;
		int[][] dp = new int[n+1][maxWeight+1];
		
		for(int i = 0; i<=n; i++) {
			dp[i][0] = 0;
		}
		
		for(int j = 0; j<=maxWeight; j++) {
			dp[0][j] = 0;
		}
		
		for(int i = 1; i<=n; i++) {
			for(int j = 1; j<= maxWeight; j++) {
				if(j-weights[i-1]>= 0) {
				dp[i][j] = Math.max(dp[i-1][j], values[i-1]+dp[i-1][j-weights[i-1]]);
				} else {
					dp[i][j] = dp[i-1][j];
				}
			}
		}
		
		
		
		
		return dp[n][maxWeight];
	}
}
