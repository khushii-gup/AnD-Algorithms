package MinimumSpanningTree;

public class UnionFind {
	
	int[] parent;
	int[] rank;
	
	public UnionFind(int n) {
		parent = new int[n];
		rank = new int[n];
		for(int i = 0; i<n; i++) {
			parent[i] = i;
		}
	}
	
	public boolean connected(int a, int b) {
		if(find(a) == find(b)) return true;
		else return false;
	}
	
	public void union(int a, int b) {
		
		if(find(a) == find(b)) return; //they are already in the same set
		
		if(rank[a] == rank[b]) {
			parent[b] = a;
			rank[a] = rank[a] + 1; 
		} else if(rank[a] < rank[b]){
			parent[a] = b;
		} else {
			parent[b] = a;
		}
		
	}
	
	public int find(int a) {
		int currNode = a;
		while(parent[currNode] != currNode) {
			//changes pointer to grandparent instead of parent -- goes through only half of the nodes in the tree
			// mroe efficient than just going to parent
			parent[currNode] = parent[parent[currNode]];
			currNode = parent[currNode];
		}
		return parent[currNode];
	}

}
