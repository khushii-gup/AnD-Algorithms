package MinimumSpanningTree;

public class UnionFind {
	
	int[] parent;
	int[] rank;
	
	public UnionFind(int n) {
		parent = new int[n];
		rank = new int[n];
		for(int i = 0; i<n; i++) {
			parent[i] = i;
		}
	}
	
	public boolean connected(int a, int b) {
		if(findVer2(a) == findVer2(b)) return true;
		else return false;
	}
	
	public void union(int a, int b) {
		int rootA = findVer2(a);
		int rootB = findVer2(b);
		if(rootA == rootB) return; //they are already in the same set
		
    		if(rank[rootA] == rank[rootB]) {
	      	parent[rootB] = rootA;
	      	rank[rootA] = rank[rootA] + 1; 
	    	} else if(rank[rootA] < rank[rootB]){
	      	parent[rootA] = rootB;
	    	} else {
	      	parent[rootB] = rootA;
	    	}
		
	}
	
	public int findVer1(int a) {
		int currNode = a;
		while(parent[currNode] != currNode) {
			//changes pointer to grandparent instead of parent -- goes through only half of the nodes in the tree
			// mroe efficient than just going to parent
			parent[currNode] = parent[parent[currNode]];
			currNode = parent[currNode];
		}
		return parent[currNode];
	}

	public int findVer2(int x){
	    if(parent[x] != x){
     	     parent[x] = findVer2(parent[x]);
   	    }
          return parent[x];
   }

}
