package MinimumSpanningTree;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class KruskalsAlgorithm {
	
	public static void main(String[] args) {

		Edge a = new Edge(0, 1, 5);
		Edge b = new Edge(1, 2, 6);
		Edge c = new Edge(2, 3, 7);
		List<Edge> list = new ArrayList<Edge>();
		list.add(a);
		list.add(b);
		list.add(c);

	}

	public static class Edge implements Comparable<Edge> {
		int u;
		int v;
		int weight;

		public Edge(int u, int v, int weight) {
			this.u = u;
			this.v = v;
			this.weight = weight;
		}

		@Override
		public int compareTo(Edge o) {
			// TODO Auto-generated method stub
			if (this.weight > o.weight) {
				return 1;
			} else if (this.weight < o.weight) {
				return -1;
			} else
				return 0;
		}
	}

	public static Set<Edge> mstKruskals(Edge[] edges, int n) {

		Arrays.sort(edges);
		Set<Edge> mst = new HashSet<Edge>();
		UnionFind unionFind = new UnionFind(n);

		for (Edge edge : edges) {
			if (!unionFind.connected(edge.u, edge.v)) {
				mst.add(edge);
				unionFind.union(edge.u, edge.v);
			}
		}

		return mst;
	}

}

