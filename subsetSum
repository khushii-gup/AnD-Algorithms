import java.util.ArrayList;
import java.util.List;


public class SubsetSum {

	public static void main(String[] args) {
		int[] A = { 5, 3, 10, 3, 1 };
		System.out.println(subsetsum(A, 6));

	}

	public static boolean subsetsum(int[] A, int b) {

		int n = A.length;
		boolean dp[][] = new boolean[n + 1][b + 1];

		// initialization
		for (int i = 0; i <= n; i++) {
			dp[i][0] = true;
		}

		for (int j = 1; j <= b; j++) {
			dp[0][j] = false;
		}

		// dp recursive definition
		// we access A[i-1] instead of A[i], because in our dp table we added an extra
		// column for 0
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= b; j++) {
				if (dp[i - 1][j]) {
					dp[i][j] = true;
				} else if ((j - A[i - 1] >= 0)) {
					dp[i][j] = dp[i - 1][j - A[i - 1]];
				} else {
					dp[i][j] = false;
				}
			}

		}

		if (dp[n][b]) {
			List<Integer> subset = findSubset(dp, A, b);
			for (int num : subset) {
				System.out.print(num + " ");
			}
			System.out.println();
		}
		// result
		return dp[n][b];

	}
//backtracking to find subs3et if such a subset is possible
	private static List<Integer> findSubset(boolean[][] dp, int[] A, int b) {

		int i = A.length;
		int j = b;
		// System.out.println(i + " " + j);
		List<Integer> subset = new ArrayList<Integer>();

		while (i > 0 && j > 0) {
			if (dp[i - 1][j]) {
				i--;
			} else if (dp[i - 1][j - A[i - 1]]) {
				subset.add(A[i - 1]);
				j = j - A[i - 1];
				i--;
			}

		}

		return subset;

	}

}
