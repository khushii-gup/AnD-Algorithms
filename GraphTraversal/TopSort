package GraphAlgorithms;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

public class TopSort {
	
	public static void main(String[] args) {
		List<List<Integer>> graph = new ArrayList<List<Integer>>();
		List<Integer> seq = new ArrayList<Integer>();
		for(int i = 0; i<5; i++) {
			graph.add(new ArrayList<Integer>());
		}
		
		graph.get(0).add(1);
		graph.get(1).add(2);
		graph.get(2).add(3);
		graph.get(0).add(4);
		graph.get(2).add(4);
		List<Integer> vis = new ArrayList<Integer>(); 
	
		dfs(graph, seq, vis, 0);
		
		for(int i = seq.size()-1; i>=0; i--) {
			System.out.print(seq.get(i) +" ");
		}
		
	}
	
	public static List<Integer> KhansAlg(int[][] A){
		
		int n = A.length;
		int[] inDegree = new int[n];
		LinkedList<Integer> queue = new LinkedList<Integer>();
		findDegreeIn(inDegree, A, n, queue);
		List<Integer> topOrder = new ArrayList<Integer>();
		
		while(!queue.isEmpty()) {
			int currVertex = queue.poll();
			topOrder.add(currVertex);
			
			for(int i = 0; i<n; i++) {
				if(A[currVertex][i] == 1) {
					inDegree[i] -= 1;
					if(inDegree[i] == 0) {
						queue.add(i);
					}
				}
			}
			
		}
			
		if(topOrder.size() == 0) {
			return null; // cycle present in Graph!
		} else return topOrder;
		
	}
	
	public static void findDegreeIn(int[] inDegree, int[][] A, int n, LinkedList<Integer> queue) {
		int count = 0;
		for(int j = 0; j<n; j++) {
			for(int i = 0; i<n; i++) {
				if(A[i][j] != 0) count++;
			}
			inDegree[j] = count;
			if(count == 0) {
				queue.add(j);
			}
			count = 0;
		}
		
	}

	public static void topologicalSorting(List<List<Integer>> graph){
		List<Integer> topSort = new ArrayList<Integer>();
		boolean[] vis = new boolean[graph.size()];

		// Perform DFS for each unvisited vertex
        	for (int i = 0; i < vertices; i++) {
            	     if (!visited[i]) {
                     dfs(graph, i, vis, topSort);
            }
        }
		
	}
	
	public static void dfs(List<List<Integer>> graph, int currVertex, boolean[] vis, List<Integer> topSort){
		
		vis[currVertex] = true;
		
		for(int child: graph.get(currVertex)) {
			if(!vis[child])) {
			dfs(graph, child, vis, topSort);
			}
		}

		topSort.add(currVertex);

	}

}
