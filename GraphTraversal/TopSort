package GraphAlgorithms;

import java.util.ArrayList;
import java.util.List;

public class TopSort {
	
	public static void main(String[] args) {
		List<List<Integer>> graph = new ArrayList<List<Integer>>();
		List<Integer> seq = new ArrayList<Integer>();
		for(int i = 0; i<5; i++) {
			graph.add(new ArrayList<Integer>());
		}
		
		graph.get(0).add(1);
		graph.get(1).add(2);
		graph.get(2).add(3);
		graph.get(0).add(4);
		graph.get(2).add(4);
		List<Integer> vis = new ArrayList<Integer>(); 
	
		dfs(graph, seq, vis, 0);
		
		for(int i = seq.size()-1; i>=0; i--) {
			System.out.print(seq.get(i) +" ");
		}
		
	}
	
	public static List<Integer> KhansAlg(int[][] A){
		
		return null;
	}
	
	public static void dfs(List<List<Integer>> graph, List<Integer> seq, List<Integer> vis, int currVertex){
		
		vis.add(currVertex);
		
		if(graph.get(currVertex).size() == 0) {
			seq.add(currVertex);
			return;
		}
		
		for(int child: graph.get(currVertex)) {
			if(!vis.contains(child)) {
			dfs(graph, seq, vis, child);
			seq.add(currVertex);
			}
		}

	}

}
