package ShortestPaths;

import java.util.ArrayList;

import java.util.List;
import java.util.PriorityQueue;

public class Dijkstra {
	
	public static void main(String[] args) {
		/*
		PriorityQueue<Node> pq = new PriorityQueue<Node>();
		Node n1 = new Node(0,8);
		Node n2 = new Node(1, 3);
		Node n3 = new Node(2, 6);
		Node n4 = new Node(3, 4);
		
		pq.add(n1);
		pq.add(n2);
		pq.add(n3);
		pq.add(n4);
		
		while(pq.size() != 0) {
			Node curr = pq.poll();
			System.out.println("key" + curr.key + " " + " dist" + curr.dist);
		}
		*/
		List<List<Edge>> graph = new ArrayList<List<Edge>>();
		Node n0 = new Node(0, 0);
		Node n1 = new Node(1, Integer.MAX_VALUE);
		Node n2 = new Node(2, Integer.MAX_VALUE);
		Node n4 = new Node(3, Integer.MAX_VALUE);
		Edge e1 = new Edge(n0, n1, 1);
		Edge e2 = new Edge(n1, n2, 2);
		Edge e3 = new Edge(n0, n4, 3);
		Edge e4 = new Edge(n4, n2, 3);
		List<Edge> l1 = new ArrayList<Edge>();
		List<Edge> l2 = new ArrayList<Edge>();
		List<Edge> l3 = new ArrayList<Edge>();
		List<Edge> l4 = new ArrayList<Edge>();
		l1.add(e1);
		l1.add(e3);
		l2.add(e2);
		l4.add(e4);
		graph.add(l1);
		graph.add(l2);
		graph.add(l3);
		graph.add(l4);
		int n = 4;
		int[] res = dijkstra(graph, 0, n);
		for(int i = 0; i<n; i++) {
			System.out.print(res[i] + " ");
		}
		System.out.println();
		
	}
	
	public static class Edge{
		
		Node from;
		Node to;
		int weight;
		
		public Edge(Node from, Node to, int weight) {
			this.from = from;
			this.to = to;
			this.weight = weight;
		}
		
	}
	
	public static class Node implements Comparable<Node> {
		
		int key;
		int dist;
		
		public Node(int key, int dist) {
			this.key = key;
			this.dist = dist;
		}
		@Override
		public int compareTo(Node o) {
			// TODO Auto-generated method stub
			if(this.dist > o.dist) {
				return 1;
			} else if(this.dist< o.dist) {
				return -1;
			}
			return 0;
		}
		
	}
	
	public static int[] dijkstra(List<List<Edge>> graph, int startKey, int n) {
		
		int[] dist = new int[n];
		Node[] parent = new Node[n];
		PriorityQueue<Node> pq = new PriorityQueue<Node>();
		for(int i = 0; i<n; i++) {
			dist[i] = Integer.MAX_VALUE;
			parent[i] = null;
		}
		dist[startKey] = 0;
		pq.add(new Node(startKey, 0));
		
		while(pq.size() != 0) {
			Node curr = pq.poll();
			
			if(dist[curr.key] < curr.dist) {
				continue; // a shorter distance has already been processed so we do not need to process this node
			}
			
			for(Edge e: graph.get(curr.key)) {
				Node v = e.to;
				
				if(dist[v.key] > dist[curr.key] + e.weight) {
					dist[v.key] = dist[curr.key] + e.weight;
					parent[v.key] = curr;
					pq.add(new Node(v.key, dist[v.key]));
				}
			}
		}
		return dist;
	}

}
