public class JumpGame {

	public static void main(String[] args) {

		int[] A = { 1, 3, 5, 3, 2, 1, 2, 4, 4, 2, 9 };
		int[] B = { 2, 3, 1, 1, 1 };
		System.out.println(recursive(B, 0, Integer.MAX_VALUE));
		System.out.println(BottomUp2(A));
		

	}

	public static int recursive(int[] A, int position, int min) {

		if (position == (A.length - 1)) {
			return 0;
		}

		if (position > (A.length - 1)) {
			return 0;
		}

		for (int i = 1; i <= A[position]; i++) {

			int totalJumps = 1 + recursive(A, position + i, min);
			if (totalJumps < min) {
				min = totalJumps;
			}
		}
		return min;

	}

	public static int topDown(int[] A, int[] dp, int position) {

		return -1;

	}

	public static int BottomUp(int[] A) {

		int n = A.length;
		int[] dp = new int[n];
		dp[0] = 0;
		
		for(int i = 1; i<n; i++) {
			dp[i] = -1;
		}

		for (int i = 0; i < n; i++) {
			for (int j = 1; j <= A[i]; j++) {
				if(i+j < n && dp[i+j] != -1 && (dp[i+j] > (dp[i] +1))){
					dp[i+j] = dp[i] + 1;
				}
				if(i+j < n && dp[i+j] == -1) {
					dp[i+j] = dp[i] + 1;
				}
			}
		}
		return dp[n-1];

	}
	
	// dp[i] = max. index that can be reached in i jumps, when for a certain i, dp[i] = n-1, then the result is i
	public static int BottomUp2(int[] A) {
		
		int n = A.length;
		int[] dp = new int[n];
		dp[0] = A[0];
		int res = 0;
		
		for(int i = 1; i<n; i++) {
			dp[i] = i + A[i];
			if(dp[i] == n-1) {
				res = i;
				break;
			}
		}
		return res;
		
	}

}

